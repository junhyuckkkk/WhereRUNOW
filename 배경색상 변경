// LocationShare SwiftUI with Kakao Map WebView
// Swift 5.9+ / iOS 17+

import SwiftUI
import CoreLocation
import WebKit

// MARK: - Location Manager
class LocationManager: NSObject, ObservableObject, CLLocationManagerDelegate {
    private let manager = CLLocationManager()
    
    @Published var location: CLLocationCoordinate2D?
    @Published var authorizationStatus: CLAuthorizationStatus?
    @Published var isLoading = false
    @Published var errorMessage: String?
    
    override init() {
        super.init()
        manager.delegate = self
        manager.desiredAccuracy = kCLLocationAccuracyBest
        manager.distanceFilter = kCLDistanceFilterNone
        authorizationStatus = manager.authorizationStatus
    }
    
    func requestLocation() {
        isLoading = true
        errorMessage = nil
        
        let status = manager.authorizationStatus
        
        if status == .notDetermined {
            manager.requestWhenInUseAuthorization()
        } else if status == .authorizedWhenInUse || status == .authorizedAlways {
            manager.startUpdatingLocation()
        } else {
            isLoading = false
            errorMessage = "위치 권한이 필요합니다. 설정에서 권한을 허용해주세요."
        }
    }
    
    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {
        isLoading = false
        if let location = locations.first {
            DispatchQueue.main.async {
                self.location = location.coordinate
                self.manager.stopUpdatingLocation()
            }
        }
    }
    
    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {
        isLoading = false
        errorMessage = "위치를 가져올 수 없습니다. 시뮬레이터의 경우 Features > Location에서 위치를 설정해주세요."
        print("Location error: \(error.localizedDescription)")
    }
    
    func locationManagerDidChangeAuthorization(_ manager: CLLocationManager) {
        authorizationStatus = manager.authorizationStatus
        // 자동으로 위치 가져오기 제거 - 버튼 클릭 시에만 가져오기
    }
}

// MARK: - Kakao Map WebView
struct KakaoMapView: UIViewRepresentable {
    let latitude: Double
    let longitude: Double
    let appKey: String
    
    func makeUIView(context: Context) -> WKWebView {
        let preferences = WKWebpagePreferences()
        preferences.allowsContentJavaScript = true
        
        let configuration = WKWebViewConfiguration()
        configuration.defaultWebpagePreferences = preferences
        configuration.websiteDataStore = WKWebsiteDataStore.nonPersistent()
        
        let webView = WKWebView(frame: .zero, configuration: configuration)
        webView.scrollView.isScrollEnabled = true
        webView.scrollView.bounces = false
        
        return webView
    }
    
    func updateUIView(_ webView: WKWebView, context: Context) {
        let htmlString = """
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
            <script type="text/javascript" src="https://dapi.kakao.com/v2/maps/sdk.js?appkey=\(appKey)"></script>
            <style>
                * { margin: 0; padding: 0; }
                html, body { width: 100%; height: 100%; overflow: hidden; }
                #map { width: 100%; height: 100%; }
            </style>
        </head>
        <body>
            <div id="map"></div>
            <script>
                var container = document.getElementById('map');
                var options = {
                    center: new kakao.maps.LatLng(\(latitude), \(longitude)),
                    level: 3
                };
                var map = new kakao.maps.Map(container, options);
                
                var markerPosition = new kakao.maps.LatLng(\(latitude), \(longitude));
                var content = '<div style="position: relative;"><div style="width: 30px; height: 30px; background-color: #4285F4; border-radius: 50%; border: 3px solid white; box-shadow: 0 2px 8px rgba(0,0,0,0.3);"></div></div>';
                var customOverlay = new kakao.maps.CustomOverlay({
                    position: markerPosition,
                    content: content,
                    yAnchor: 0.5
                });
                customOverlay.setMap(map);
                
                var zoomControl = new kakao.maps.ZoomControl();
                map.addControl(zoomControl, kakao.maps.ControlPosition.RIGHT);
            </script>
        </body>
        </html>
        """
        
        webView.loadHTMLString(htmlString, baseURL: nil)
    }
}

// MARK: - Content View
struct ContentView: View {
    // MARK: - State Variables
    @StateObject private var locationManager = LocationManager()
    @State private var showShareSheet = false
    @State private var shareImage: UIImage?
    @State private var address: String = ""
    @State private var isLoadingAddress = false
    
    // MARK: - Constants
    private let kakaoAppKey = "348a0a29e51e5ea4228395e6ccbc3d27"
    
    // MARK: - Body
    var body: some View {
        ZStack {
            // MARK: - 배경
            LinearGradient(
                colors: [Color(hex: "A3BFFA"), Color(hex: "FFFFFF")],
                startPoint: .top,
                endPoint: .bottom
            )
            .ignoresSafeArea()
            
            ScrollView {
                VStack(spacing: 24) {
                    
                    // MARK: - 1. 타이틀 영역
                    VStack(spacing: 12) {
                        // 선명한 파란색 배경
                        ZStack {
                            Circle()
                                .fill(Color(hex: "4A90E2"))
                                .frame(width: 90, height: 90)
                                .shadow(color: .black.opacity(0.15), radius: 8, y: 4)
                            
                            Image(systemName: "location.fill")
                                .font(.system(size: 45))
                                .foregroundStyle(.white)
                        }
                        
                        Text("위치 공유")
                            .font(.system(size: 32, weight: .bold))
                            .foregroundColor(Color(hex: "2D5AA0"))
                        
                        Text("버튼을 눌러 현재 위치를 공유하세요")
                            .font(.subheadline)
                            .foregroundColor(Color(hex: "4A7BC8"))
                            .multilineTextAlignment(.center)
                    }
                    .padding(.top, 40)
                    .padding(.horizontal)
                    
                    // MARK: - 2. 에러 메시지
                    if let error = locationManager.errorMessage {
                        HStack {
                            Image(systemName: "exclamationmark.triangle.fill")
                            Text(error)
                                .font(.subheadline)
                        }
                        .padding()
                        .background(Color(hex: "FFB4B4"))
                        .foregroundColor(Color(hex: "8B0000"))
                        .clipShape(RoundedRectangle(cornerRadius: 12))
                        .padding(.horizontal)
                    }
                    
                    // MARK: - 3. 메인 컨텐츠 영역
                    VStack(spacing: 16) {
                        
                        // MARK: - 3-1. 위치 가져오기 전 (첫 화면)
                        if locationManager.location == nil {
                            Button(action: requestLocation) {
                                HStack {
                                    if locationManager.isLoading {
                                        ProgressView()
                                            .tint(Color(hex: "5B8DEF"))
                                        Text("위치 가져오는 중...")
                                            .fontWeight(.semibold)
                                            .foregroundColor(Color(hex: "5B8DEF"))
                                    } else {
                                        Image(systemName: "location.fill")
                                        Text("내 위치 가져오기")
                                            .fontWeight(.semibold)
                                    }
                                }
                                .frame(maxWidth: .infinity)
                                .padding()
                                .background(Color.white)
                                .foregroundColor(Color(hex: "5B8DEF"))
                                .clipShape(RoundedRectangle(cornerRadius: 14, style: .continuous))
                                .shadow(color: Color(hex: "5B8DEF").opacity(0.3), radius: 10, y: 5)
                            }
                            .disabled(locationManager.isLoading)
                        }
                        
                        // MARK: - 3-2. 위치 가져온 후
                        if let loc = locationManager.location {
                            
                            // MARK: - 3-2-1. 카카오 지도
                            VStack(spacing: 0) {
                                KakaoMapView(
                                    latitude: loc.latitude,
                                    longitude: loc.longitude,
                                    appKey: kakaoAppKey
                                )
                                .frame(height: 400)
                                .clipShape(RoundedRectangle(cornerRadius: 16, style: .continuous))
                                .id("mapView") // 스크린샷을 위한 ID
                            }
                            .background(Color.white)
                            .clipShape(RoundedRectangle(cornerRadius: 16, style: .continuous))
                            .shadow(color: Color(hex: "5B8DEF").opacity(0.2), radius: 15, y: 8)
                            .transition(.scale.combined(with: .opacity))
                            
                            // MARK: - 3-2-2. 공유 버튼
                            Button(action: { captureAndShare() }) {
                                HStack {
                                    Image(systemName: "square.and.arrow.up")
                                    Text("위치 공유하기")
                                        .fontWeight(.semibold)
                                }
                                .frame(maxWidth: .infinity)
                                .padding()
                                .background(
                                    LinearGradient(
                                        colors: [Color(hex: "5B8DEF"), Color(hex: "7B9FD3")],
                                        startPoint: .leading,
                                        endPoint: .trailing
                                    )
                                )
                                .foregroundColor(.white)
                                .clipShape(RoundedRectangle(cornerRadius: 14, style: .continuous))
                                .shadow(color: Color(hex: "5B8DEF").opacity(0.4), radius: 8, y: 4)
                            }
                            
                            // MARK: - 3-2-3. 다시 가져오기 버튼
                            Button(action: resetLocation) {
                                HStack {
                                    Image(systemName: "arrow.counterclockwise")
                                        .font(.system(size: 16, weight: .semibold))
                                    Text("다시 가져오기")
                                        .fontWeight(.semibold)
                                }
                                .frame(maxWidth: .infinity)
                                .padding()
                                .background(Color.white)
                                .foregroundColor(Color(hex: "4A7BC8"))
                                .clipShape(RoundedRectangle(cornerRadius: 14, style: .continuous))
                                .shadow(color: .black.opacity(0.1), radius: 8, y: 4)
                            }
                        }
                        
                        // MARK: - 3-3. 하단 라벨
                        HStack(spacing: 4) {
                            Image(systemName: "map.fill")
                                .font(.caption)
                            Text("카카오맵 사용 중")
                                .font(.caption)
                        }
                        .foregroundColor(Color(hex: "7B9FD3"))
                    }
                    .padding(.horizontal, 24)
                    .padding(.bottom, 40)
                }
            }
        }
        .onReceive(locationManager.$location) { newLocation in
            if let coord = newLocation {
                Task {
                    await fetchAddress(for: coord)
                }
            }
        }
        .sheet(isPresented: $showShareSheet) {
            if let image = shareImage {
                ShareSheet(items: [image, address.isEmpty ? "내 현재 위치" : address])
            }
        }
    }
    
    // MARK: - Functions
    
    /// 위치 가져오기 요청
    func requestLocation() {
        locationManager.requestLocation()
    }
    
    /// 주소 가져오기
    @MainActor
    func fetchAddress(for coordinate: CLLocationCoordinate2D) async {
        isLoadingAddress = true
        
        let geocoder = CLGeocoder()
        let location = CLLocation(latitude: coordinate.latitude, longitude: coordinate.longitude)
        
        do {
            let placemarks = try await geocoder.reverseGeocodeLocation(location, preferredLocale: Locale(identifier: "ko_KR"))
            
            if let placemark = placemarks.first {
                var addressComponents: [String] = []
                
                if let area = placemark.administrativeArea {
                    addressComponents.append(area)
                }
                if let locality = placemark.locality {
                    addressComponents.append(locality)
                }
                if let subLocality = placemark.subLocality {
                    addressComponents.append(subLocality)
                }
                if let thoroughfare = placemark.thoroughfare {
                    addressComponents.append(thoroughfare)
                }
                
                address = addressComponents.isEmpty ? "위치 정보" : addressComponents.joined(separator: " ")
            }
        } catch {
            address = "위치 정보"
            print("Geocoding error: \(error)")
        }
        
        isLoadingAddress = false
    }
    
    /// 화면 캡처 및 공유
    func captureAndShare() {
        // 현재 화면의 전체 뷰를 캡처
        let scenes = UIApplication.shared.connectedScenes
        let windowScene = scenes.first as? UIWindowScene
        guard let window = windowScene?.windows.first else { return }
        
        let renderer = UIGraphicsImageRenderer(bounds: window.bounds)
        let image = renderer.image { context in
            window.drawHierarchy(in: window.bounds, afterScreenUpdates: true)
        }
        
        shareImage = image
        showShareSheet = true
    }
    
    /// 위치 정보 초기화
    func resetLocation() {
        withAnimation {
            locationManager.location = nil
            locationManager.errorMessage = nil
            address = ""
        }
    }
}

// MARK: - Share Sheet
struct ShareSheet: UIViewControllerRepresentable {
    let items: [Any]
    
    func makeUIViewController(context: Context) -> UIActivityViewController {
        let controller = UIActivityViewController(activityItems: items, applicationActivities: nil)
        return controller
    }
    
    func updateUIViewController(_ uiViewController: UIActivityViewController, context: Context) {}
}

// MARK: - Preview
#Preview("위치 공유 앱") {
    ContentView()
}

// MARK: - Color Extension
extension Color {
    init(hex: String) {
        let hex = hex.trimmingCharacters(in: CharacterSet.alphanumerics.inverted)
        var int: UInt64 = 0
        Scanner(string: hex).scanHexInt64(&int)
        let a, r, g, b: UInt64
        switch hex.count {
        case 3: // RGB (12-bit)
            (a, r, g, b) = (255, (int >> 8) * 17, (int >> 4 & 0xF) * 17, (int & 0xF) * 17)
        case 6: // RGB (24-bit)
            (a, r, g, b) = (255, int >> 16, int >> 8 & 0xFF, int & 0xFF)
        case 8: // ARGB (32-bit)
            (a, r, g, b) = (int >> 24, int >> 16 & 0xFF, int >> 8 & 0xFF, int & 0xFF)
        default:
            (a, r, g, b) = (255, 0, 0, 0)
        }
        self.init(
            .sRGB,
            red: Double(r) / 255,
            green: Double(g) / 255,
            blue:  Double(b) / 255,
            opacity: Double(a) / 255
        )
    }
}
